// SPDX-License-Identifier: MIT
pragma solidity ^0.8.30;

contract SimpleBank {
    // Event declarations
    event Deposit(address indexed account, uint256 amount);
    event Withdrawal(address indexed account, uint256 amount);
    event Transfer(address indexed from, address indexed to, uint256 amount);
    event AccountCreated(address indexed account);
    
    // Mapping to store balances
    mapping(address => uint256) public balances;
    
    // Array to track all accounts
    address[] public accounts;
    
    // Modifier to check if account has sufficient balance
    modifier hasSufficientBalance(uint256 amount) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        _;
    }
    
    // Constructor
    constructor() {
        // Create an account for the contract deployer
        createAccount();
    }
    
    // Function to create a new account
    function createAccount() public {
        require(balances[msg.sender] == 0, "Account already exists");
        balances[msg.sender] = 0;
        accounts.push(msg.sender);
        emit AccountCreated(msg.sender);
    }
    
    // Function to deposit funds
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }
    
    // Function to withdraw funds
    function withdraw(uint256 amount) public hasSufficientBalance(amount) {
        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        emit Withdrawal(msg.sender, amount);
    }
    
    // Function to transfer funds to another address
    function transfer(address to, uint256 amount) public hasSufficientBalance(amount) {
        require(to != address(0), "Cannot transfer to zero address");
        require(to != msg.sender, "Cannot transfer to yourself");
        
        balances[msg.sender] -= amount;
        balances[to] += amount;
        
        emit Transfer(msg.sender, to, amount);
    }
    
    // Function to get account balance
    function getBalance() public view returns (uint256) {
        return balances[msg.sender];
    }
    
    // Function to get total number of accounts
    function getTotalAccounts() public view returns (uint256) {
        return accounts.length;
    }
    
    // Function to check if an address has an account
    function hasAccount(address _address) public view returns (bool) {
        return balances[_address] == 0 ? false : true;
    }
}
