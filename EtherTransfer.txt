// SPDX-License-Identifier: MIT
pragma solidity ^0.8.21;

contract EtherDeposit {
    address public owner;

    constructor() {
        owner = msg.sender;
    }

    // Function to receive Ether. `payable` allows contract to accept Ether.
    receive() external payable {}

    // Deposit function (alternative to receive)
    function deposit() public payable {
        require(msg.value > 0, "Send some Ether");
    }

    // Get the balance of the contract
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }

    // Withdraw funds only by owner
    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only owner can withdraw");
        require(amount <= address(this).balance, "Insufficient balance");
        payable(owner).transfer(amount);
    }
    // Function to send Ether to a specified address
        function sendEther(address payable _recipient, uint _amount) public payable {
            require(msg.sender == owner, "Only the owner can send Ether"); // Optional: Restrict sending to owner
            require(address(this).balance >= _amount, "Insufficient contract balance"); // Check if contract has enough Ether
            _recipient.transfer(_amount); // Send the specified amount
        }
}
